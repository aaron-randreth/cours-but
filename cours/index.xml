<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cours</title><link>https://aaron-randreth.github.io/cours/</link><description>Recent content on Cours</description><generator>Hugo -- gohugo.io</generator><language>fr</language><lastBuildDate>Thu, 17 Nov 2022 11:17:52 +0100</lastBuildDate><atom:link href="https://aaron-randreth.github.io/cours/index.xml" rel="self" type="application/rss+xml"/><item><title>Amphithéatre de droit</title><link>https://aaron-randreth.github.io/cours/droit2/</link><pubDate>Thu, 17 Nov 2022 11:17:52 +0100</pubDate><guid>https://aaron-randreth.github.io/cours/droit2/</guid><description>Processus de formation du contrat Liberté contractuelle Article 1101 du Code Civil: Accord de volontés
Article 1102, principe de liberté:
de contracter ou de ne pas contracter choisir son cocontractant déterminer le contenu et la forme du contrat Certains contrats sont obligatoires comme les contrats d&amp;rsquo;assurance pour louer une maison. Les contrats de grès à grès, càd qui se négocient. Les contrats d&amp;rsquo;adhésion (Article 1110) eux ne se négocient pas e.</description></item><item><title>Droit1</title><link>https://aaron-randreth.github.io/cours/droit1/</link><pubDate>Thu, 17 Nov 2022 11:17:52 +0100</pubDate><guid>https://aaron-randreth.github.io/cours/droit1/</guid><description/></item><item><title>Proba3</title><link>https://aaron-randreth.github.io/cours/proba3/</link><pubDate>Tue, 15 Nov 2022 17:14:27 +0100</pubDate><guid>https://aaron-randreth.github.io/cours/proba3/</guid><description/></item><item><title>Qualité de Developpement</title><link>https://aaron-randreth.github.io/cours/qualdev1/</link><pubDate>Wed, 09 Nov 2022 09:42:09 +0100</pubDate><guid>https://aaron-randreth.github.io/cours/qualdev1/</guid><description>Notions étudié Principe SOLID Dépendance Test Driven Dev Prérequis Encapsulation Sous-typage Bibliographie Agile software dev (Robert C Martin) Refactoring: Improving the Design of Existing Code (Martin Fowler, Addison-Wesley) Complexité, coûts et changements Principe YAGNI qui chercher àà limiter la complexité, et make features when they have a good reason to be needed. Changements principaux -&amp;gt; rajouter un cas. Ex: rajouter un type d&amp;rsquo;anneau
Coût que l&amp;rsquo;on chercher à minimiser -&amp;gt; coût &amp;ldquo;marginal&amp;rdquo;, le changement que l&amp;rsquo;on va introduire dans les autres classes en créant cette nouvelle classe.</description></item><item><title>DevSys5</title><link>https://aaron-randreth.github.io/cours/devsys5/</link><pubDate>Wed, 28 Sep 2022 08:15:45 +0200</pubDate><guid>https://aaron-randreth.github.io/cours/devsys5/</guid><description>#include &amp;lt;unistd.h&amp;gt; int pipte(int df(2)); fd[0] est ouvert en lecture et fd[1] en écriture Tout ce qui est écrit dans fd[1] est transmis par pipe à fd[0]. Le père et le fils partagent les descripteurs des fichiers du tube. Quand l&amp;rsquo;un écrit à une extremité, l&amp;rsquo;autre peut lire l&amp;rsquo;autre extremité.
On n&amp;rsquo;utilise la pipe que dans un sens.
ex:
si fils écrit et père lit, fils doit fermer son fd[0] (lecture) et le père doit fermer son fd[1] (écriture).</description></item><item><title>DevSys4</title><link>https://aaron-randreth.github.io/cours/devsys4/</link><pubDate>Wed, 21 Sep 2022 08:11:19 +0200</pubDate><guid>https://aaron-randreth.github.io/cours/devsys4/</guid><description>Appels systèmes pipe: Permet à une comande d&amp;rsquo;envoyer des données à un autre.
kill-signal: envoie et reception d&amp;rsquo;un signal (le proc va regarder de regularly un tableau de signaux)
sockets: communication à distance
Sous Unix, plusieurs procs lourds peuvent partager la même zone mémoire (pratique pour la comm inter proc, pas très utilisé)
Fork() Crée un nouveau proc via duplication, le processus père est dupliqué et crée un processus fils.</description></item><item><title>Variables aléatoires discrètes</title><link>https://aaron-randreth.github.io/cours/proba2/</link><pubDate>Thu, 08 Sep 2022 11:05:26 +0200</pubDate><guid>https://aaron-randreth.github.io/cours/proba2/</guid><description>Ex:
Sur 10 dés, quel est la proba d&amp;rsquo;obtenir 3 fois la valeur 6 ?
On prend la valeur aléatoire X = nb de 6. Ici X peut avoir 10 valeur, un 6, deux 6, trois 6 etc&amp;hellip; X suis donc une loi binomiale. X compte un binaire ,et donc une loi de bernouli, si on ne lance le dés qu&amp;rsquo;une seule fois. Avec X(succès) = &amp;ldquo;obtient 6&amp;rdquo; et X(échec) = &amp;ldquo;n&amp;rsquo;obtient pas 6&amp;rdquo;.</description></item><item><title>DevSys2</title><link>https://aaron-randreth.github.io/cours/devsys2/</link><pubDate>Wed, 07 Sep 2022 08:06:35 +0200</pubDate><guid>https://aaron-randreth.github.io/cours/devsys2/</guid><description>Processus en mémoire : Programme en exe
[Stack] [ | ] [ v ] [ ] [ ] [ ] [ ^ ] [ | ] [heap ] [data ] [text ] -&amp;gt; stores machine code
Hiérarchie de la mémoire cache -&amp;gt; megaoctets, rapide, chère, volatile -&amp;gt; utile pour les operations processeurs, ralenti moins que la RAM RAM -&amp;gt; giga-octet, rapide, prix moyen, volatile SSD -&amp;gt; tera-octet, lent, non volatile, cheap Adresse logique/physique Adresse symbolique: Adresse dans le prg</description></item><item><title>Développement système: Introduction</title><link>https://aaron-randreth.github.io/cours/devsys/</link><pubDate>Fri, 02 Sep 2022 11:37:22 +0200</pubDate><guid>https://aaron-randreth.github.io/cours/devsys/</guid><description>Objectifs &amp;ldquo;Comprendre la structure d&amp;rsquo;une application client-server, et les mécanismes bas niveaux, mis en oeuvre dans une application multitâches.&amp;rdquo;
Processus: l&amp;rsquo;ensemble des données stoqué par l&amp;rsquo;OS pour effectuer une action.
Multitâches (multithreaded): utilisation de plusieurs coeurs pour effectuer une action.
Multiprocessus: utilisation de plusieurs processus pour effectuer une action.
Découverte du développement d&amp;rsquo;applications multi-processus, traiter les problèmes de synchronisations, utiliser des outils de communications internes aux processus (interne à une même machine), mais aussi externe (entre plusieurs machines, via les sockets) via les APIs de transport.</description></item><item><title>Communication: Introduction</title><link>https://aaron-randreth.github.io/cours/com1/</link><pubDate>Fri, 02 Sep 2022 10:35:41 +0200</pubDate><guid>https://aaron-randreth.github.io/cours/com1/</guid><description>Modalités d&amp;rsquo;évaluation Contrôle continu + dossier
Interrogations non noté mais corrigé sur les cours précédents, avec les notes de cours. Création d&amp;rsquo;un dossier en groupe de 3-4 personnes, noté.
Les piliers de l&amp;rsquo;apprentissage Source: S.Dehaene - recherches en neurosciences cognitives.
l&amp;rsquo;attention l&amp;rsquo;engagement actif le retour sur erreur la consolidation (le sommeil) Apprentissage machine Comment un enfant apprend-il les catégories visuelles ? On lui fournis des exemples, avec une récompence pour les bonnes prédictions.</description></item><item><title>DevWeb: Introduction</title><link>https://aaron-randreth.github.io/cours/devweb1/</link><pubDate>Fri, 02 Sep 2022 09:43:48 +0200</pubDate><guid>https://aaron-randreth.github.io/cours/devweb1/</guid><description>Langages php -&amp;gt; server side js -&amp;gt; client side JQuery ReactNative web assembly -&amp;gt; client side Interactions avec l&amp;rsquo;utilisateur en Js Relation etre balises et données de script Correspondance directe entre une balise et un objet
Balise -&amp;gt; Objet
attributs -&amp;gt; propriétés contenu -&amp;gt; objet fils gestionnaires d&amp;rsquo;événements -&amp;gt; méthodes Hiérarchisation d&amp;rsquo;objets pour une page html La page html est représenté par une hierarchie en arbre similaire à l&amp;rsquo;encapsulation des balises html.</description></item><item><title>Probalités: Introduction</title><link>https://aaron-randreth.github.io/cours/proba1/</link><pubDate>Mon, 29 Aug 2022 10:09:02 +0200</pubDate><guid>https://aaron-randreth.github.io/cours/proba1/</guid><description>Objectifs du module modélistion aléatoire Utilisations possibles de la probalité Calculer la valeur approchée d&amp;rsquo;une intégrale On place N nombres de points dans le carré, et on compte le nombre de points qui se situent sur la courbe. La proportion de point va nous donner une idée de l&amp;rsquo;aire. e.g si la courbe a une aire de 0.6 dans le carré de 1 alors on va retrouver cette proportion de points sous cette courbe.</description></item></channel></rss>